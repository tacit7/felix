defmodule RouteWiseApi.Repo.Migrations.AddFullTextSearchToPlaces do
  use Ecto.Migration

  def up do
    # Add search fields
    alter table(:places) do
      add :description, :text  # Extracted from google_data
      add :search_vector, :tsvector  # Full-text search vector
      add :popularity_score, :integer, default: 0  # Based on reviews, rating
      add :last_updated, :utc_datetime  # For data freshness
    end

    # Create full-text search index
    execute """
    CREATE INDEX places_search_vector_idx ON places USING GIN(search_vector);
    """

    # Create composite indexes for multi-criteria search
    create index(:places, [:popularity_score])
    create index(:places, [:rating, :reviews_count])
    create index(:places, [:place_types], using: :gin)
    create index(:places, [:last_updated])

    # Function to calculate popularity score
    execute """
    CREATE OR REPLACE FUNCTION calculate_popularity_score(
      rating DECIMAL, 
      reviews_count INTEGER,
      place_types TEXT[]
    ) RETURNS INTEGER AS $$
    BEGIN
      RETURN COALESCE(
        (rating::INTEGER * 20) + 
        LEAST(reviews_count, 1000) + 
        (CASE WHEN 'restaurant' = ANY(place_types) THEN 50 ELSE 0 END) +
        (CASE WHEN 'tourist_attraction' = ANY(place_types) THEN 30 ELSE 0 END),
        0
      );
    END;
    $$ LANGUAGE plpgsql;
    """

    # Function to update search vector
    execute """
    CREATE OR REPLACE FUNCTION update_places_search() RETURNS TRIGGER AS $$
    BEGIN
      -- Extract description from google_data
      NEW.description = COALESCE(
        NEW.google_data->'editorial_summary'->>'overview',
        COALESCE(NEW.google_data->>'business_status', '') || ' ' || COALESCE(array_to_string(NEW.place_types, ' '), '')
      );
      
      -- Calculate popularity score
      NEW.popularity_score = calculate_popularity_score(
        NEW.rating, 
        NEW.reviews_count, 
        NEW.place_types
      );
      
      -- Update search vector with weighted content
      NEW.search_vector = 
        setweight(to_tsvector('english', COALESCE(NEW.name, '')), 'A') ||
        setweight(to_tsvector('english', COALESCE(NEW.formatted_address, '')), 'B') ||
        setweight(to_tsvector('english', COALESCE(NEW.description, '')), 'C') ||
        setweight(to_tsvector('english', array_to_string(NEW.place_types, ' ')), 'D');
      
      NEW.last_updated = NOW();
      RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    """

    # Create trigger
    execute """
    CREATE TRIGGER places_search_trigger
    BEFORE INSERT OR UPDATE ON places
    FOR EACH ROW EXECUTE FUNCTION update_places_search();
    """

    # Update existing records
    execute """
    UPDATE places SET updated_at = updated_at;
    """
  end

  def down do
    execute "DROP TRIGGER IF EXISTS places_search_trigger ON places;"
    execute "DROP FUNCTION IF EXISTS update_places_search();"
    execute "DROP FUNCTION IF EXISTS calculate_popularity_score(DECIMAL, INTEGER, TEXT[]);"
    execute "DROP INDEX IF EXISTS places_search_vector_idx;"
    
    alter table(:places) do
      remove :description
      remove :search_vector
      remove :popularity_score
      remove :last_updated
    end
  end
end
